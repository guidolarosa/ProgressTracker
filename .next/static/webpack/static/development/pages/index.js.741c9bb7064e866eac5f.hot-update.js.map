{"version":3,"file":"static/webpack/static/development/pages/index.js.741c9bb7064e866eac5f.hot-update.js","sources":["webpack:///./components/Countdown.js"],"sourcesContent":["import useInterval from './../tools/useInterval';\nimport { getBlack, getPallete } from './../theme/colors';\nimport { useState, useEffect } from 'react';\n\nconst Countdown = props => {\n    \n    const [ isTimeUp, setIsTimeUp ] = useState(false);\n    const [ isTimerRunning, setIsTimerRunning ] = useState(false);\n    const [ timeRemaining, setTimeRemaining ] = useState({\n        minutes: 25,\n        seconds: 0\n    });\n\n    const toggleTimerState = () => {\n        setIsTimerRunning(!isTimerRunning);\n    }\n\n    const returnNextTime = previousTime => {\n        console.log(previousTime)\n        let newMinutes, newSeconds;\n        newMinutes = previousTime.seconds === 0 ?\n            --previousTime.minutes :\n            previousTime.minutes;\n        newSeconds = previousTime.seconds === 0 ?\n            59 :\n            --previousTime.seconds;\n        if (newMinutes === 0 && newSeconds === 0) {\n            setIsTimerRunning(false);\n            setIsTimeUp(true);\n            return {\n                minutes: newMinutes,\n                seconds: newSeconds\n            }\n        }\n        return {\n            minutes: newMinutes,\n            seconds: newSeconds\n        }\n    }\n\n    useEffect(() => {\n        if (isTimeUp) {\n            alert('Time up baby!');\n        }\n    },[ isTimeUp ])\n        \n    useEffect(() => {\n        let timerInterval = null;\n        if (isTimerRunning) {\n            // console.log('Timer running');\n            timerInterval = setInterval(() => {\n                console.log('Tick...');\n                setTimeRemaining(returnNextTime(timeRemaining));\n            }, 1000);\n        } else {\n            // console.log('Timer stopped')\n        }\n        return () => clearInterval(timerInterval);\n    },[ isTimerRunning, timeRemaining ]);\n\n    const changeMinutes = change => {\n        if (timeRemaining.minutes < 95) {\n            setTimeRemaining({\n                minutes: timeRemaining.minutes += change,\n                seconds: timeRemaining.seconds\n            })\n        }\n    };\n\n    const resetTimer = (resetTime = {minutes: 25, seconds: 0}) => {\n        setIsTimerRunning(false);\n        setTimeRemaining({\n            minutes: resetTime.minutes,\n            seconds: resetTime.seconds\n        })\n    }\n\n    const isTimeZero = timeRemaining => {\n        const { minutes, seconds } = timeRemaining;\n        console.log(minutes, seconds);\n        if (minutes == 0 && seconds == 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    return (\n        <>\n            <span className={isTimerRunning ?\n                    'countdown timer-running' :\n                    'countdown'\n                }>\n                {timeRemaining.minutes < 10 ?\n                    '0' + timeRemaining.minutes :\n                    timeRemaining.minutes\n                }:{timeRemaining.seconds < 10 ?\n                    '0' + timeRemaining.seconds :\n                    timeRemaining.seconds\n                }\n            </span>\n            <section className=\"countdown-controls\">\n                <span\n                    className={isTimeZero(timeRemaining) ? \n                        'disabled change-minutes-button' :\n                        'change-minutes-button'\n                        }\n                    title=\"Remove 5 minutes\"\n                    onClick={() => changeMinutes(-5)}>-5</span>\n                <span\n                    title=\"Play/resume countdown\"\n                    className={`control-button ${isTimerRunning ? `disabled` : ``}`}\n                    onClick={() => {setIsTimerRunning(true)}}>\n                    <img src=\"/img/icon-play.png\"/>\n                </span>\n                <span\n                    title=\"Reset countdown\"\n                    className={`control-button`}\n                    onClick={() => {resetTimer()}}>\n                    <img src=\"/img/icon-reset.png\"/>\n                </span>\n                <span\n                    title=\"Pause countdown\"\n                    className={`control-button ${!isTimerRunning ? `disabled` : ``}`}\n                    onClick={() => {setIsTimerRunning(false)}}>\n                    <img src=\"/img/icon-pause.png\"/>\n                </span>\n                <span\n                    className=\"change-minutes-button\"\n                    title=\"Add 5 minutes\"\n                    onClick={() => changeMinutes(5)}>+5</span>\n            </section>\n            <style jsx>{`\n                @keyframes fade-in-out {\n                    0% {opacity: 1}\n                    50% {opacity: .5}\n                    100% {opacity: 1}\n                }\n                .countdown {\n                    display: inline-block;\n                    width: 100%;\n                    text-align: center;\n                    font-size: 6rem;\n                    font-weight: 500;\n                    margin-top: 20px;\n                    opacity: 1;\n                }\n                .countdown.timer-running {\n                    animation-name: fade-in-out;\n                    animation-duration: 2s;\n                    animation-timing-function: ease-in-out;\n                    animation-fill-mode: forward;\n                    animation-iteration-count: infinite;\n                }\n                .countdown-controls {\n                    height: 50px;\n                    width: 100%;\n                    border-radius: 100px;\n                    background: white;\n                    display: flex;\n                    justify-content: space-between;\n                    padding: 0 20px;\n                    box-shadow: 0px 2px 5px black;\n                }\n                .countdown-controls span {\n                    font-size: 1.5rem;\n                    line-height: 50px;\n                    font-weight: bold;  \n                    color: ${getBlack(.6)};\n                    cursor: pointer;\n                }\n                .countdown-controls span img {\n                    height: 1.5rem;\n                    position: relative;\n                    top: 5px;\n                }\n                .control-button {\n                    transition: .2s ease-in-out opacity;\n                }\n                .control-button.disabled,\n                .change-minutes-button.disabled {\n                    opacity: .3;\n                    pointer-events: none;\n                }\n                .change-minutes-button {\n                    opacity: .7;\n                    transition: .1s ease-in-out opacity;\n                }\n                .change-minutes-button:hover {\n                    opacity: 1;\n                }\n            `}</style>\n        </>\n    )\n}\n\nexport default Countdown;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AAFA;AAJA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvCA;AAAA;AAAA;AAAA;AA0GA;AACA;AACA;;;;A","sourceRoot":""}