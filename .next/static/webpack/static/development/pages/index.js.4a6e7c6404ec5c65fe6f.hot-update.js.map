{"version":3,"file":"static/webpack/static/development/pages/index.js.4a6e7c6404ec5c65fe6f.hot-update.js","sources":["webpack:///./components/Countdown.js"],"sourcesContent":["import useInterval from './../tools/useInterval';\nimport { getBlack } from './../theme/colors';\nimport { useState, useEffect } from 'react';\n\nconst Countdown = props => {\n    \n    const [ isTimeUp, setIsTimeUp ] = useState(false);\n    const [ isTimerRunning, setIsTimerRunning ] = useState(false);\n    const [ timeRemaining, setTimeRemaining ] = useState({\n        minutes: 25,\n        seconds: 0\n    });\n\n    const toggleTimerState = () => {\n        setIsTimerRunning(!isTimerRunning);\n    }\n\n    const returnNextTime = previousTime => {\n        console.log(previousTime)\n        let newMinutes, newSeconds;\n        newMinutes = previousTime.seconds === 0 ?\n            --previousTime.minutes :\n            previousTime.minutes;\n        newSeconds = previousTime.seconds === 0 ?\n            59 :\n            --previousTime.seconds;\n        if (newMinutes === 0 && newSeconds === 0) {\n            setIsTimerRunning(false);\n            setIsTimeUp(true);\n            return {\n                minutes: newMinutes,\n                seconds: newSeconds\n            }\n        }\n        return {\n            minutes: newMinutes,\n            seconds: newSeconds\n        }\n    }\n\n    useEffect(() => {\n        if (isTimeUp) {\n            alert('Time up baby!');\n        }\n    },[ isTimeUp ])\n        \n    useEffect(() => {\n        let timerInterval = null;\n        if (isTimerRunning) {\n            console.log('Timer running');\n            timerInterval = setInterval(() => {\n                console.log('Tick...');\n                setTimeRemaining(returnNextTime(timeRemaining));\n            }, 1000);\n        } else {\n            console.log('Timer stopped')\n        }\n        return () => clearInterval(timerInterval);\n    },[ isTimerRunning, timeRemaining ])\n\n    return (\n        <>\n            <span \n                className=\"countdown\" \n                onClick={toggleTimerState}\n            >\n                {timeRemaining.minutes < 10 ?\n                    '0' + timeRemaining.minutes :\n                    timeRemaining.minutes\n                }:{timeRemaining.seconds < 10 ?\n                    '0' + timeRemaining.seconds :\n                    timeRemaining.seconds\n                }\n            </span>\n            <section className=\"countdown-controls\">\n                <span>-5</span>\n                <span>PL</span>\n                <span>PS</span>\n                <span>+5</span>\n            </section>\n            <style jsx>{`\n                .countdown {\n                    display: inline-block;\n                    width: 100%;\n                    text-align: center;\n                    font-size: 5rem;\n                    font-weight: 500;\n                }\n                .countdown-controls {\n                    height: 50px;\n                    width: 100%;\n                    border-radius: 100px;\n                    background: white;\n                    display: flex;\n                    justify-content: space-between;\n                    padding: 0 20px;\n                }\n                .countdown-controls span {\n                    font-size: 1.5rem;\n                    line-height: 50px;\n                    font-weight: bold;\n                    color: ${getBlack(.7)}\n                }\n            `}</style>\n        </>\n    )\n}\n\nexport default Countdown;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AAFA;AAJA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AA6CA;AACA;AACA;;;;A","sourceRoot":""}