{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { getBlack, getPallete } from './../theme/colors';\nimport Moment from 'react-moment';\n\nconst DetailsPanel = props => {\n  const {\n    userData\n  } = props;\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  const today = new Date();\n\n  const turnDaysIntoArray = month => {\n    const days = [];\n    const totalDays = daysInMonth(month, today.getFullYear());\n\n    for (let i = 1; i <= totalDays; i++) {\n      days.push(i);\n    }\n\n    return days;\n  };\n\n  const daysInMonth = (month, year) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  const formatDate = date => {\n    let month = date.getMonth();\n    let day = date.getDate();\n    let year = date.getFullYear();\n    let weekday = date.getDay();\n    return `${weekdays[weekday]} ${day} ${months[month]} ${year}`;\n  };\n\n  const isFutureMonth = (year, month, day) => {\n    let givenDate = new Date(year, month, day);\n    let isFutureMonth = givenDate > today ? true : false;\n    return isFutureMonth;\n  };\n\n  const isDayEmpty = (year, month, day) => {\n    let givenDate = new Date(year, month, day);\n    let userTaskHistory = userData.user_history;\n\n    if (userTaskHistory) {\n      userTaskHistory.forEach(task => {\n        let taskDate = new Date(task.date.year, task.date.month, task.date.day);\n\n        if (taskDate.getTime() == givenDate.getTime()) {\n          console.log(givenDate + ' is not empty');\n          return false;\n        } else {\n          console.log('Is empty');\n          return true;\n        }\n      });\n    }\n  };\n\n  const FutureDay = () => {\n    return __jsx(\"img\", {\n      src: \"/img/icon-day-indicator-disabled.png\"\n    });\n  };\n\n  const DayIndicator = props => {\n    let completed = props.completed;\n    return completed > 75 ? __jsx(\"img\", {\n      src: \"/img/icon-day-indicator-100.png\"\n    }) : completed == 0 ? __jsx(\"img\", {\n      src: \"/img/icon-day-indicator-empty.png\"\n    }) : '';\n  };\n\n  return __jsx(\"section\", {\n    className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"details-panel\"\n  }, __jsx(\"h2\", {\n    className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"dropdown-title-selector\"\n  }, \"Year\"), __jsx(\"section\", {\n    className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"months-container\"\n  }, months.map((month, monthIndex) => {\n    return __jsx(\"section\", {\n      key: monthIndex,\n      className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + ((monthIndex > today.getMonth() ? 'month following-month' : 'month') || \"\")\n    }, __jsx(\"h3\", {\n      className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"month-name\"\n    }, month), __jsx(\"section\", {\n      className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"day-progress-container\"\n    }, turnDaysIntoArray(monthIndex).map(day => {\n      return __jsx(\"section\", {\n        title: formatDate(new Date(today.getFullYear(), monthIndex, day)),\n        className: \"jsx-3025927470 \" + _JSXStyle.dynamic([[\"4104692347\", [getBlack(0.8), getBlack(.5), getBlack(.1)]]]) + \" \" + \"day-indicator\"\n      }, isFutureMonth(today.getFullYear(), monthIndex, day) ? __jsx(FutureDay, null) : !isDayEmpty(today.getFullYear(), monthIndex, day) ? __jsx(DayIndicator, {\n        completed: 0\n      }) : __jsx(DayIndicator, {\n        completed: 100\n      }));\n    })));\n  })), __jsx(_JSXStyle, {\n    id: \"4104692347\",\n    dynamic: [getBlack(0.8), getBlack(.5), getBlack(.1)]\n  }, [\".details-panel.__jsx-style-dynamic-selector{padding:20px;background:white;grid-area:details;border-radius:10px;position:relative;}\", \".details-panel.__jsx-style-dynamic-selector::before{content:'';position:absolute;width:100%;background:white;height:30px;opacity:1;bottom:10px;left:0;background:linear-gradient(rgba(0,0,0,0),white);z-index:1;}\", `.details-panel.__jsx-style-dynamic-selector h2.__jsx-style-dynamic-selector{color:${getBlack(0.8)};}`, \".months-container.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;overflow-y:auto;height:95%;padding-right:15px;margin-top:5px;}\", \".months-container.__jsx-style-dynamic-selector::-webkit-scrollbar{background:white;border:0;width:5px;}\", \".months-container.__jsx-style-dynamic-selector::-webkit-scrollbar-thumb{background:lightgray;border-radius:10px;}\", \".month.__jsx-style-dynamic-selector{width:47%;margin-bottom:20px;}\", `.month.__jsx-style-dynamic-selector .month-name.__jsx-style-dynamic-selector{font-weight:500;color:${getBlack(.5)};padding-bottom:3px;border-bottom:1px solid ${getBlack(.1)};margin-bottom:10px;font-size:.8rem;}`, \".month.following-month.__jsx-style-dynamic-selector h3.__jsx-style-dynamic-selector{opacity:.3;}\"]), __jsx(_JSXStyle, {\n    id: \"3025927470\"\n  }, [\".day-progress-container{display:grid;grid-template-columns:repeat(7,7fr);grid-template-rows:repeat(5,auto);-webkit-column-gap:3px;column-gap:3px;row-gap:5px;}\", \".day-progress-container .day-indicator img{width:100%;}\"]));\n};\n\nexport default DetailsPanel;","map":null,"metadata":{},"sourceType":"module"}