{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/Countdown.js\";\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\n\nvar Countdown = function Countdown(props) {\n  var _useState = useState(false),\n      isTimerRunning = _useState[0],\n      setIsTimerRunning = _useState[1];\n\n  var _useState2 = useState({\n    minutes: 25,\n    seconds: 0\n  }),\n      timeRemaining = _useState2[0],\n      setTimeRemaining = _useState2[1];\n\n  var toggleTimerState = function toggleTimerState() {\n    setIsTimerRunning(!isTimerRunning);\n  };\n\n  var timerInterval = null;\n  useEffect(function () {\n    console.log(isTimerRunning);\n    var timerInterval;\n\n    if (isTimerRunning) {\n      console.log('Timer running');\n      timerInterval = setInterval(function () {\n        console.log('Tick');\n      }, 1000);\n    } else {\n      console.log('Timer stopped');\n      return function () {\n        return clearInterval(timerInterval);\n      };\n    }\n  }, [isTimerRunning]);\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    onClick: toggleTimerState,\n    className: \"jsx-3372631114\" + \" \" + \"countdown\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, timeRemaining.minutes, \":\", timeRemaining.seconds), __jsx(\"section\", {\n    className: \"jsx-3372631114\" + \" \" + \"countdown-controls\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), __jsx(_JSXStyle, {\n    id: \"3372631114\",\n    __self: _this\n  }, \".jsx-3372631114{display:inline-block;width:100%;text-align:center;font-size:6rem;font-weight:500;}.countdown-controls.jsx-3372631114{height:50px;width:100%;border-radius:100px;background:white;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ndWlkb2xhcm9zYS9Eb2N1bWVudHMvV0VCREVWL1Byb2dyZXNzVHJhY2tlci9jb21wb25lbnRzL0NvdW50ZG93bi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQ3dCLEFBRXNDLEFBTUwsWUFDRCxTQU5KLEVBT2EsU0FOTixXQU9HLE9BTk4sVUFPZixLQU5nQixnQkFPcEIiLCJmaWxlIjoiL1VzZXJzL2d1aWRvbGFyb3NhL0RvY3VtZW50cy9XRUJERVYvUHJvZ3Jlc3NUcmFja2VyL2NvbXBvbmVudHMvQ291bnRkb3duLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuXG5jb25zdCBDb3VudGRvd24gPSBwcm9wcyA9PiB7XG4gICAgXG4gICAgY29uc3QgWyBpc1RpbWVyUnVubmluZywgc2V0SXNUaW1lclJ1bm5pbmcgXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbIHRpbWVSZW1haW5pbmcsIHNldFRpbWVSZW1haW5pbmcgXSA9IHVzZVN0YXRlKHtcbiAgICAgICAgbWludXRlczogMjUsXG4gICAgICAgIHNlY29uZHM6IDBcbiAgICB9KTtcblxuICAgIGNvbnN0IHRvZ2dsZVRpbWVyU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgIHNldElzVGltZXJSdW5uaW5nKCFpc1RpbWVyUnVubmluZyk7XG4gICAgfVxuICAgIFxuICAgIGxldCB0aW1lckludGVydmFsID0gbnVsbDtcbiAgICBcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhpc1RpbWVyUnVubmluZyk7XG4gICAgICAgIGxldCB0aW1lckludGVydmFsO1xuICAgICAgICBpZiAoaXNUaW1lclJ1bm5pbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaW1lciBydW5uaW5nJyk7XG4gICAgICAgICAgICB0aW1lckludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaWNrJylcbiAgICAgICAgICAgIH0sMTAwMClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaW1lciBzdG9wcGVkJylcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHRpbWVySW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfSxbIGlzVGltZXJSdW5uaW5nIF0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPHNwYW4gXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY291bnRkb3duXCIgXG4gICAgICAgICAgICAgICAgb25DbGljaz17dG9nZ2xlVGltZXJTdGF0ZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGltZVJlbWFpbmluZy5taW51dGVzfTp7dGltZVJlbWFpbmluZy5zZWNvbmRzfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY291bnRkb3duLWNvbnRyb2xzXCI+XG5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogNnJlbTtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICAgICAgICAgIC5jb3VudGRvd24tY29udHJvbHMge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMDBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvdW50ZG93bjsiXX0= */\\n/*@ sourceURL=/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/Countdown.js */\"));\n};\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/Countdown.js"],"names":["useState","useEffect","Countdown","props","isTimerRunning","setIsTimerRunning","minutes","seconds","timeRemaining","setTimeRemaining","toggleTimerState","timerInterval","console","log","setInterval","clearInterval"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,kBAEuBH,QAAQ,CAAC,KAAD,CAF/B;AAAA,MAEfI,cAFe;AAAA,MAECC,iBAFD;;AAAA,mBAGqBL,QAAQ,CAAC;AACjDM,IAAAA,OAAO,EAAE,EADwC;AAEjDC,IAAAA,OAAO,EAAE;AAFwC,GAAD,CAH7B;AAAA,MAGfC,aAHe;AAAA,MAGAC,gBAHA;;AAQvB,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3BL,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACH,GAFD;;AAIA,MAAIO,aAAa,GAAG,IAApB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACA,QAAIO,aAAJ;;AACA,QAAIP,cAAJ,EAAoB;AAChBQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAF,MAAAA,aAAa,GAAGG,WAAW,CAAC,YAAM;AAC9BF,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,OAF0B,EAEzB,IAFyB,CAA3B;AAGH,KALD,MAKO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO;AAAA,eAAME,aAAa,CAACJ,aAAD,CAAnB;AAAA,OAAP;AACH;AACJ,GAZQ,EAYP,CAAEP,cAAF,CAZO,CAAT;AAcA,SACI,4BACI;AAEI,IAAA,OAAO,EAAEM,gBAFb;AAAA,wCACc,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKF,aAAa,CAACF,OAJnB,OAI6BE,aAAa,CAACD,OAJ3C,CADJ,EAOI;AAAA,wCAAmB,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ;AAAA;AAAA;AAAA,03FADJ;AA0BH,CAtDD;;AAwDA,eAAeL,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nconst Countdown = props => {\n    \n    const [ isTimerRunning, setIsTimerRunning ] = useState(false);\n    const [ timeRemaining, setTimeRemaining ] = useState({\n        minutes: 25,\n        seconds: 0\n    });\n\n    const toggleTimerState = () => {\n        setIsTimerRunning(!isTimerRunning);\n    }\n    \n    let timerInterval = null;\n    \n    useEffect(() => {\n        console.log(isTimerRunning);\n        let timerInterval;\n        if (isTimerRunning) {\n            console.log('Timer running');\n            timerInterval = setInterval(() => {\n                console.log('Tick')\n            },1000)\n        } else {\n            console.log('Timer stopped')\n            return () => clearInterval(timerInterval);\n        }\n    },[ isTimerRunning ])\n\n    return (\n        <>\n            <span \n                className=\"countdown\" \n                onClick={toggleTimerState}\n            >\n                {timeRemaining.minutes}:{timeRemaining.seconds}\n            </span>\n            <section className=\"countdown-controls\">\n\n            </section>\n            <style jsx>{`\n                display: inline-block;\n                width: 100%;\n                text-align: center;\n                font-size: 6rem;\n                font-weight: 500;\n                .countdown-controls {\n                    height: 50px;\n                    width: 100%;\n                    border-radius: 100px;\n                    background: white;\n                }\n            `}</style>\n        </>\n    )\n}\n\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}