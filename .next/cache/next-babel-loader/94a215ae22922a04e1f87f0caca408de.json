{"ast":null,"code":"var _jsxFileName = \"/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/TaskPanel.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { getTaskColor } from './../theme/colors';\n\nconst TaskPanel = props => {\n  const getSelectedTask = taskId => {\n    const userTasks = props.userTasks;\n    let selectedTask = null;\n    userTasks.forEach(task => {\n      if (task.id == taskId) {\n        selectedTask = task;\n      }\n    });\n    return selectedTask;\n  };\n\n  const switchSelectedTask = newTaskId => {\n    let selectedTask = getSelectedTask(newTaskId);\n    console.log(selectedTask);\n    setTimeout(() => {\n      console.log(selectedTask);\n    }, 1000);\n    props.setSelectedTask(selectedTask);\n  };\n\n  return __jsx(\"section\", {\n    className: \"jsx-1450250488\" + \" \" + \"task-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-1450250488\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"What are you working on?\"), props.userTasks ? props.userTasks.map((task, index) => {\n    return __jsx(\"span\", {\n      key: index,\n      taskId: task.id,\n      onClick: () => {\n        switchSelectedTask(task.id);\n      },\n      style: {\n        background: getTaskColor(task.color)\n      },\n      className: \"jsx-1450250488\" + \" \" + \"task\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, task.name);\n  }) : __jsx(\"span\", {\n    className: \"jsx-1450250488\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 22\n    }\n  }, \"No tasks added yet.\"), __jsx(_JSXStyle, {\n    id: \"1450250488\",\n    __self: this\n  }, \".task-panel.jsx-1450250488{background-color:white;grid-area:tasks;border-radius:10px;padding:20px;}.task-panel.jsx-1450250488 .task.jsx-1450250488{display:inline-block;padding:5px 10px;border-radius:100px;background:slateblue;font-size:.8rem;margin-right:5px;cursor:pointer;margin-bottom:5px;}.task-panel.jsx-1450250488:hover .task.jsx-1450250488{opacity:.5;}h2.jsx-1450250488{color:#2D2D2D;font-size:1rem;margin-bottom:10px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ndWlkb2xhcm9zYS9Eb2N1bWVudHMvV0VCREVWL1Byb2dyZXNzVHJhY2tlci9jb21wb25lbnRzL1Rhc2tQYW5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQ3dCLEFBRzRDLEFBTUYsQUFXMUIsQUFFbUIsV0FGbEIsR0FHbUIsT0FiRSxFQU5ELE1Bb0JHLFNBYkMsQ0FORCxTQW9CdkIsVUFuQmlCLEFBTVEsYUFMekIsUUFNb0IsZ0JBQ0MsaUJBQ0YsZUFDRyxrQkFDdEIiLCJmaWxlIjoiL1VzZXJzL2d1aWRvbGFyb3NhL0RvY3VtZW50cy9XRUJERVYvUHJvZ3Jlc3NUcmFja2VyL2NvbXBvbmVudHMvVGFza1BhbmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFRhc2tDb2xvciB9IGZyb20gJy4vLi4vdGhlbWUvY29sb3JzJztcblxuY29uc3QgVGFza1BhbmVsID0gcHJvcHMgPT4ge1xuXG4gICAgY29uc3QgZ2V0U2VsZWN0ZWRUYXNrID0gdGFza0lkID0+IHtcbiAgICAgICAgY29uc3QgdXNlclRhc2tzID0gcHJvcHMudXNlclRhc2tzO1xuICAgICAgICBsZXQgc2VsZWN0ZWRUYXNrID0gbnVsbDtcbiAgICAgICAgdXNlclRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgICAgICBpZiAodGFzay5pZCA9PSB0YXNrSWQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFRhc2sgPSB0YXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gc2VsZWN0ZWRUYXNrO1xuICAgIH1cbiAgICBjb25zdCBzd2l0Y2hTZWxlY3RlZFRhc2sgPSBuZXdUYXNrSWQgPT4ge1xuICAgICAgICBsZXQgc2VsZWN0ZWRUYXNrID0gZ2V0U2VsZWN0ZWRUYXNrKG5ld1Rhc2tJZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkVGFzayk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRUYXNrKVxuICAgICAgICB9LCAxMDAwKVxuICAgICAgICBwcm9wcy5zZXRTZWxlY3RlZFRhc2soc2VsZWN0ZWRUYXNrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwidGFzay1wYW5lbFwiPlxuICAgICAgICAgICAgPGgyPldoYXQgYXJlIHlvdSB3b3JraW5nIG9uPzwvaDI+XG4gICAgICAgICAgICB7cHJvcHMudXNlclRhc2tzID8gXG4gICAgICAgICAgICAgICAgcHJvcHMudXNlclRhc2tzLm1hcCgodGFzaywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRhc2tcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tJZD17dGFzay5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7c3dpdGNoU2VsZWN0ZWRUYXNrKHRhc2suaWQpfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBnZXRUYXNrQ29sb3IodGFzay5jb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGFzay5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSkgOiA8c3Bhbj5ObyB0YXNrcyBhZGRlZCB5ZXQuPC9zcGFuPn1cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICAudGFzay1wYW5lbCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICAgICAgICBncmlkLWFyZWE6IHRhc2tzO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAudGFzay1wYW5lbCAudGFzayB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBzbGF0ZWJsdWU7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhyZW07XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLnRhc2stcGFuZWw6aG92ZXIgLnRhc2sge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAuNVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoMiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMkQyRDJEO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrUGFuZWw7Il19 */\\n/*@ sourceURL=/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/TaskPanel.js */\"));\n};\n\nexport default TaskPanel;","map":{"version":3,"sources":["/Users/guidolarosa/Documents/WEBDEV/ProgressTracker/components/TaskPanel.js"],"names":["useEffect","useState","getTaskColor","TaskPanel","props","getSelectedTask","taskId","userTasks","selectedTask","forEach","task","id","switchSelectedTask","newTaskId","console","log","setTimeout","setSelectedTask","map","index","background","color","name"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAEvB,QAAMC,eAAe,GAAGC,MAAM,IAAI;AAC9B,UAAMC,SAAS,GAAGH,KAAK,CAACG,SAAxB;AACA,QAAIC,YAAY,GAAG,IAAnB;AACAD,IAAAA,SAAS,CAACE,OAAV,CAAkBC,IAAI,IAAI;AACtB,UAAIA,IAAI,CAACC,EAAL,IAAWL,MAAf,EAAuB;AACnBE,QAAAA,YAAY,GAAGE,IAAf;AACH;AACJ,KAJD;AAKA,WAAOF,YAAP;AACH,GATD;;AAUA,QAAMI,kBAAkB,GAAGC,SAAS,IAAI;AACpC,QAAIL,YAAY,GAAGH,eAAe,CAACQ,SAAD,CAAlC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACAQ,IAAAA,UAAU,CAAC,MAAM;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACH,KAFS,EAEP,IAFO,CAAV;AAGAJ,IAAAA,KAAK,CAACa,eAAN,CAAsBT,YAAtB;AACH,GAPD;;AASA,SACI;AAAA,wCAAmB,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEKJ,KAAK,CAACG,SAAN,GACGH,KAAK,CAACG,SAAN,CAAgBW,GAAhB,CAAoB,CAACR,IAAD,EAAOS,KAAP,KAAiB;AACjC,WACI;AAEI,MAAA,GAAG,EAAEA,KAFT;AAGI,MAAA,MAAM,EAAET,IAAI,CAACC,EAHjB;AAII,MAAA,OAAO,EAAE,MAAM;AAACC,QAAAA,kBAAkB,CAACF,IAAI,CAACC,EAAN,CAAlB;AAA4B,OAJhD;AAKI,MAAA,KAAK,EAAE;AACHS,QAAAA,UAAU,EAAElB,YAAY,CAACQ,IAAI,CAACW,KAAN;AADrB,OALX;AAAA,0CACc,MADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQKX,IAAI,CAACY,IARV,CADJ;AAYH,GAbD,CADH,GAcQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAhBb;AAAA;AAAA;AAAA,stIADJ;AA8CH,CAnED;;AAqEA,eAAenB,SAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { getTaskColor } from './../theme/colors';\n\nconst TaskPanel = props => {\n\n    const getSelectedTask = taskId => {\n        const userTasks = props.userTasks;\n        let selectedTask = null;\n        userTasks.forEach(task => {\n            if (task.id == taskId) {\n                selectedTask = task;\n            }\n        })\n        return selectedTask;\n    }\n    const switchSelectedTask = newTaskId => {\n        let selectedTask = getSelectedTask(newTaskId);\n        console.log(selectedTask);\n        setTimeout(() => {\n            console.log(selectedTask)\n        }, 1000)\n        props.setSelectedTask(selectedTask);\n    };\n\n    return (\n        <section className=\"task-panel\">\n            <h2>What are you working on?</h2>\n            {props.userTasks ? \n                props.userTasks.map((task, index) => {\n                    return (\n                        <span \n                            className=\"task\" \n                            key={index}\n                            taskId={task.id}\n                            onClick={() => {switchSelectedTask(task.id)}}\n                            style={{\n                                background: getTaskColor(task.color)\n                            }}>\n                            {task.name}\n                        </span>\n                    )\n                }) : <span>No tasks added yet.</span>}\n            <style jsx>{`\n                .task-panel {\n                    background-color: white;\n                    grid-area: tasks;\n                    border-radius: 10px;\n                    padding: 20px;\n                }\n                .task-panel .task {\n                    display: inline-block;\n                    padding: 5px 10px;\n                    border-radius: 100px;\n                    background: slateblue;\n                    font-size: .8rem;\n                    margin-right: 5px;\n                    cursor: pointer;\n                    margin-bottom: 5px;\n                }\n                .task-panel:hover .task {\n                    opacity: .5\n                }\n                h2 {\n                    color: #2D2D2D;\n                    font-size: 1rem;\n                    margin-bottom: 10px;\n                }\n            `}</style>\n        </section>\n    )\n}\n\nexport default TaskPanel;"]},"metadata":{},"sourceType":"module"}