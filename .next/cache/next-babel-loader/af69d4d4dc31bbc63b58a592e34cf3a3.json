{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useInterval from './../tools/useInterval';\nimport { getBlack } from './../theme/colors';\nimport { useState, useEffect } from 'react';\n\nconst Countdown = props => {\n  const {\n    0: isTimeUp,\n    1: setIsTimeUp\n  } = useState(false);\n  const {\n    0: isTimerRunning,\n    1: setIsTimerRunning\n  } = useState(false);\n  const {\n    0: timeRemaining,\n    1: setTimeRemaining\n  } = useState({\n    minutes: 25,\n    seconds: 0\n  });\n\n  const toggleTimerState = () => {\n    setIsTimerRunning(!isTimerRunning);\n  };\n\n  const returnNextTime = previousTime => {\n    console.log(previousTime);\n    let newMinutes, newSeconds;\n    newMinutes = previousTime.seconds === 0 ? --previousTime.minutes : previousTime.minutes;\n    newSeconds = previousTime.seconds === 0 ? 59 : --previousTime.seconds;\n\n    if (newMinutes === 0 && newSeconds === 0) {\n      setIsTimerRunning(false);\n      setIsTimeUp(true);\n      return {\n        minutes: newMinutes,\n        seconds: newSeconds\n      };\n    }\n\n    return {\n      minutes: newMinutes,\n      seconds: newSeconds\n    };\n  };\n\n  useEffect(() => {\n    if (isTimeUp) {\n      alert('Time up baby!');\n    }\n  }, [isTimeUp]);\n  useEffect(() => {\n    let timerInterval = null;\n\n    if (isTimerRunning) {\n      console.log('Timer running');\n      timerInterval = setInterval(() => {\n        console.log('Tick...');\n        setTimeRemaining(returnNextTime(timeRemaining));\n      }, 1000);\n    } else {\n      console.log('Timer stopped');\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [isTimerRunning, timeRemaining]);\n\n  const changeMinutes = change => {\n    if (timeRemaining.minutes < 95) {\n      setTimeRemaining({\n        minutes: timeRemaining.minutes += change,\n        seconds: timeRemaining.seconds\n      });\n    }\n  };\n\n  const resetTimer = (resetTime = {\n    minutes: 25,\n    seconds: 0\n  }) => {\n    setIsTimerRunning(false);\n    setTimeRemaining({\n      minutes: resetTime.minutes,\n      seconds: resetTime.seconds\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]]) + \" \" + ((isTimerRunning ? 'countdown timer-running' : 'countdown') || \"\")\n  }, timeRemaining.minutes < 10 ? '0' + timeRemaining.minutes : timeRemaining.minutes, \":\", timeRemaining.seconds < 10 ? '0' + timeRemaining.seconds : timeRemaining.seconds), __jsx(\"section\", {\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]]) + \" \" + \"countdown-controls\"\n  }, __jsx(\"span\", {\n    title: \"Remove 5 minutes\",\n    onClick: () => changeMinutes(-5),\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]])\n  }, \"-5\"), __jsx(\"span\", {\n    title: \"Play/resume countdown\",\n    onClick: () => {\n      setIsTimerRunning(true);\n    },\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]]) + \" \" + `control-button ${isTimerRunning ? `disabled` : ``}`\n  }, __jsx(\"img\", {\n    src: \"/img/icon-play.png\",\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]])\n  })), __jsx(\"span\", {\n    title: \"Reset countdown\",\n    onClick: () => {\n      resetTimer();\n    },\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]]) + \" \" + `control-button`\n  }, __jsx(\"img\", {\n    src: \"/img/icon-reset.png\",\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]])\n  })), __jsx(\"span\", {\n    title: \"Pause countdown\",\n    onClick: () => {\n      setIsTimerRunning(false);\n    },\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]]) + \" \" + `control-button ${!isTimerRunning ? `disabled` : ``}`\n  }, __jsx(\"img\", {\n    src: \"/img/icon-pause.png\",\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]])\n  })), __jsx(\"span\", {\n    title: \"Add 5 minutes\",\n    onClick: () => changeMinutes(5),\n    className: _JSXStyle.dynamic([[\"1827114629\", [getBlack(.4)]]])\n  }, \"+5\")), __jsx(_JSXStyle, {\n    id: \"1827114629\",\n    dynamic: [getBlack(.4)]\n  }, [\"@-webkit-keyframes fade-in-out-__jsx-style-dynamic-selector{0%{opacity:1;}50%{opacity:.7;}100%{opacity:1;}}\", \"@keyframes fade-in-out-__jsx-style-dynamic-selector{0%{opacity:1;}50%{opacity:.7;}100%{opacity:1;}}\", \".countdown.__jsx-style-dynamic-selector{display:inline-block;width:100%;text-align:center;font-size:6rem;font-weight:500;margin-top:20px;opacity:1;}\", \".countdown.timer-running.__jsx-style-dynamic-selector{-webkit-animation-name:fade-in-out-__jsx-style-dynamic-selector;animation-name:fade-in-out-__jsx-style-dynamic-selector;-webkit-animation-duration:.5s;animation-duration:.5s;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;-webkit-animation-fill-mode:forward;animation-fill-mode:forward;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}\", \".countdown-controls.__jsx-style-dynamic-selector{height:50px;width:100%;border-radius:100px;background:white;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;padding:0 20px;box-shadow:0px 2px 5px brown;}\", `.countdown-controls.__jsx-style-dynamic-selector span.__jsx-style-dynamic-selector{font-size:1.5rem;line-height:50px;font-weight:bold;color:${getBlack(.4)};cursor:pointer;}`, \".countdown-controls.__jsx-style-dynamic-selector span.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{height:1.5rem;position:relative;top:5px;}\", \".control-button.__jsx-style-dynamic-selector{-webkit-transition:.2s ease-in-out opacity;transition:.2s ease-in-out opacity;}\", \".control-button.disabled.__jsx-style-dynamic-selector{opacity:.5;}\"]));\n};\n\nexport default Countdown;","map":null,"metadata":{},"sourceType":"module"}