{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Countdown.js","webpack:///./components/DetailsPanel.js","webpack:///./components/Log.js","webpack:///./components/Navbar.js","webpack:///./components/TaskPanel.js","webpack:///./components/TimePanel.js","webpack:///./pages/index.js","webpack:///./theme/colors.js","webpack:///./tools/useInterval.js","webpack:///external \"chroma-js\"","webpack:///external \"react\"","webpack:///external \"react-moment\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import useInterval from './../tools/useInterval';\nimport { getBlack, getPallete } from './../theme/colors';\nimport { useState, useEffect } from 'react';\n\nconst Countdown = props => {\n    \n    const [ isTimeUp, setIsTimeUp ] = useState(false);\n    const [ isTimerRunning, setIsTimerRunning ] = useState(false);\n    const [ timeRemaining, setTimeRemaining ] = useState({\n        minutes: 25,\n        seconds: 0\n    });\n\n    const toggleTimerState = () => {\n        setIsTimerRunning(!isTimerRunning);\n    }\n\n    const returnNextTime = previousTime => {\n        // console.log(previousTime)\n        let newMinutes, newSeconds;\n        newMinutes = previousTime.seconds === 0 ?\n            --previousTime.minutes :\n            previousTime.minutes;\n        newSeconds = previousTime.seconds === 0 ?\n            59 :\n            --previousTime.seconds;\n        if (newMinutes === 0 && newSeconds === 0) {\n            setIsTimerRunning(false);\n            setIsTimeUp(true);\n            return {\n                minutes: newMinutes,\n                seconds: newSeconds\n            }\n        }\n        return {\n            minutes: newMinutes,\n            seconds: newSeconds\n        }\n    }\n\n    useEffect(() => {\n        if (isTimeUp) {\n            alert('Time up baby!');\n        }\n    },[ isTimeUp ])\n        \n    useEffect(() => {\n        let timerInterval = null;\n        if (isTimerRunning) {\n            // console.log('Timer running');\n            timerInterval = setInterval(() => {\n                // console.log('Tick...');\n                setTimeRemaining(returnNextTime(timeRemaining));\n            }, 1000);\n        } else {\n            // console.log('Timer stopped')\n        }\n        return () => clearInterval(timerInterval);\n    },[ isTimerRunning, timeRemaining ]);\n\n    const changeMinutes = change => {\n        if (timeRemaining.minutes < 95) {\n            setTimeRemaining({\n                minutes: timeRemaining.minutes += change,\n                seconds: timeRemaining.seconds\n            })\n        }\n    };\n\n    const resetTimer = (resetTime = {minutes: 25, seconds: 0}) => {\n        setIsTimerRunning(false);\n        setTimeRemaining({\n            minutes: resetTime.minutes,\n            seconds: resetTime.seconds\n        })\n    }\n\n    const isTimeZero = timeRemaining => {\n        const { minutes, seconds } = timeRemaining;\n        // console.log(minutes, seconds);\n        if (minutes == 0 && seconds == 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    return (\n        <>\n            <span className={isTimerRunning ?\n                    'countdown timer-running' :\n                    'countdown'\n                }>\n                {timeRemaining.minutes < 10 ?\n                    '0' + timeRemaining.minutes :\n                    timeRemaining.minutes\n                }:{timeRemaining.seconds < 10 ?\n                    '0' + timeRemaining.seconds :\n                    timeRemaining.seconds\n                }\n            </span>\n            <section className=\"countdown-controls\">\n                <span\n                    className={isTimeZero(timeRemaining) ? \n                        'disabled change-minutes-button' :\n                        'change-minutes-button'\n                        }\n                    title=\"Remove 5 minutes\"\n                    onClick={() => changeMinutes(-5)}>-5</span>\n                <span\n                    title=\"Play/resume countdown\"\n                    className={`control-button ${isTimerRunning ? `disabled` : ``}`}\n                    onClick={() => {setIsTimerRunning(true)}}>\n                    <img src=\"/img/icon-play.png\"/>\n                </span>\n                <span\n                    title=\"Reset countdown\"\n                    className={`control-button`}\n                    onClick={() => {resetTimer()}}>\n                    <img src=\"/img/icon-reset.png\"/>\n                </span>\n                <span\n                    title=\"Pause countdown\"\n                    className={`control-button ${!isTimerRunning ? `disabled` : ``}`}\n                    onClick={() => {setIsTimerRunning(false)}}>\n                    <img src=\"/img/icon-pause.png\"/>\n                </span>\n                <span\n                    className=\"change-minutes-button\"\n                    title=\"Add 5 minutes\"\n                    onClick={() => changeMinutes(5)}>+5</span>\n            </section>\n            <style jsx>{`\n                @keyframes fade-in-out {\n                    0% {opacity: 1}\n                    50% {opacity: .5}\n                    100% {opacity: 1}\n                }\n                .countdown {\n                    display: inline-block;\n                    width: 100%;\n                    text-align: center;\n                    font-size: 6rem;\n                    font-weight: 500;\n                    margin-top: 20px;\n                    opacity: 1;\n                }\n                .countdown.timer-running {\n                    animation-name: fade-in-out;\n                    animation-duration: 2s;\n                    animation-timing-function: ease-in-out;\n                    animation-fill-mode: forward;\n                    animation-iteration-count: infinite;\n                }\n                .countdown-controls {\n                    height: 50px;\n                    width: 100%;\n                    border-radius: 100px;\n                    background: white;\n                    display: flex;\n                    justify-content: space-between;\n                    padding: 0 20px;\n                    box-shadow: 0px 2px 5px black;\n                }\n                .countdown-controls span {\n                    font-size: 1.5rem;\n                    line-height: 50px;\n                    font-weight: bold;  \n                    color: ${getBlack(.6)};\n                    cursor: pointer;\n                }\n                .countdown-controls span img {\n                    height: 1.5rem;\n                    position: relative;\n                    top: 5px;\n                }\n                .control-button {\n                    transition: .2s ease-in-out opacity;\n                }\n                .control-button.disabled,\n                .change-minutes-button.disabled {\n                    opacity: .3;\n                    pointer-events: none;\n                }\n                .change-minutes-button {\n                    opacity: .7;\n                    transition: .1s ease-in-out opacity;\n                }\n                .change-minutes-button:hover {\n                    opacity: 1;\n                }\n            `}</style>\n        </>\n    )\n}\n\nexport default Countdown;","import { getBlack, getPallete } from './../theme/colors';\nimport Moment from 'react-moment';\n\nconst DetailsPanel = props => {\n    const { userData } = props;\n    const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n\n    const weekdays = [\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n        'Sunday'\n    ]\n\n    const today = new Date();\n\n    const turnDaysIntoArray = (month) => {\n        const days = [];\n        const totalDays = daysInMonth(month, today.getFullYear());\n        for (let i = 1; i <= totalDays; i++) {\n            days.push(i);\n        }\n        return days;\n    }\n\n    const daysInMonth = (month, year) => {\n        return new Date(year, month, 0).getDate();\n    }\n\n    const formatDate = date => {\n        let month = date.getMonth();\n        let day = date.getDate();\n        let year = date.getFullYear();\n        let weekday = date.getDay();\n        return `${weekdays[weekday]} ${day} ${months[month]} ${year}`;\n    }\n\n    const isFutureMonth = (year, month, day) => {\n        let givenDate = new Date(year, month, day);\n        let isFutureMonth = givenDate > today ? true : false;\n        return isFutureMonth;\n    }\n\n    const isDayEmpty = (year, month, day) => {\n        let givenDate = new Date(year, month, day);\n        let userTaskHistory = userData.user_history;\n        if (userTaskHistory) {\n            userTaskHistory.forEach(task => {\n                let taskDate = new Date(task.date.year, task.date.month, task.date.day);\n                if (taskDate.getTime() == givenDate.getTime()) {\n                    console.log(givenDate + ' is not empty')\n                    return false;\n                } else {\n                    console.log('Is empty');\n                    return true;\n                }\n            })\n        }\n    }\n\n    const FutureDay = () => {\n        return (\n            <img src='/img/icon-day-indicator-disabled.png'/>\n        )\n    }\n\n    const DayIndicator = (props) => {\n        let completed = props.completed;\n        return completed > 75 ?\n            <img src='/img/icon-day-indicator-100.png' /> :\n            completed == 0 ?\n            <img src='/img/icon-day-indicator-empty.png' /> :\n            ''\n    }\n\n    return (\n        <section className=\"details-panel\">\n            <h2 className=\"dropdown-title-selector\">Year</h2>\n            <section className=\"months-container\">\n                {months.map((month, monthIndex) => {\n                    return (\n                        <section \n                            className={monthIndex > today.getMonth() ?\n                                'month following-month' :\n                                'month'}\n                            key={monthIndex}>\n                            <h3 className=\"month-name\">{month}</h3>\n                            <section className=\"day-progress-container\">\n                                {turnDaysIntoArray(monthIndex).map((day) => {\n                                    return (\n                                        <section \n                                            title={formatDate(new Date(today.getFullYear(), monthIndex, day))}\n                                            className=\"day-indicator\">\n                                                {isFutureMonth(today.getFullYear(), monthIndex, day) ?\n                                                    <FutureDay /> :\n                                                    !isDayEmpty(today.getFullYear(), monthIndex, day) ? \n                                                        <DayIndicator completed={0} /> :\n                                                        <DayIndicator completed={100} />\n                                                }\n                                        </section>\n                                    )\n                                })}\n                            </section>\n                        </section>\n                    )\n                })}\n            </section>\n            <style jsx>{`\n                .details-panel {\n                    padding: 20px;\n                    background: white;\n                    grid-area: details;\n                    border-radius: 10px;\n                    position: relative;\n                }\n                .details-panel::before {\n                    content: '';\n                    position: absolute;\n                    width: 100%;\n                    background: white;\n                    height: 30px;\n                    opacity: 1;\n                    bottom: 10px;\n                    left: 0;\n                    background: linear-gradient(rgba(0,0,0,0), white);\n                    z-index: 1;\n                }\n                .details-panel h2 {\n                    color: ${getBlack(0.8)};\n                }\n                .months-container {\n                    display: flex;\n                    justify-content: space-between;\n                    flex-wrap: wrap;\n                    overflow-y: auto;\n                    height: 95%;\n                    padding-right: 15px;\n                    margin-top: 5px;\n                }\n                .months-container::-webkit-scrollbar {\n                    background: white;\n                    border: 0;\n                    width: 5px;\n                }\n                .months-container::-webkit-scrollbar-thumb {\n                    background: lightgray;\n                    border-radius: 10px;\n                }\n                .month {\n                    width: 47%;\n                    margin-bottom: 20px;\n                }\n                .month .month-name {\n                    font-weight: 500;\n                    color: ${getBlack(.5)};\n                    padding-bottom: 3px;\n                    border-bottom: 1px solid ${getBlack(.1)};\n                    margin-bottom: 10px;\n                    font-size: .8rem;\n                }\n                .month.following-month h3 {\n                    opacity: .3;\n                }\n            `}</style>\n            <style jsx global>{`\n                .day-progress-container {\n                    display: grid;\n                    grid-template-columns: repeat(7, 7fr);\n                    grid-template-rows: repeat(5, auto);\n                    column-gap: 3px;\n                    row-gap: 5px;\n                }\n                .day-progress-container .day-indicator img {\n                    width: 100%;\n                }\n            `}\n            </style>\n        </section>\n    )\n}\n\nexport default DetailsPanel;","const Log = (props) => {\n    return (\n        <section className=\"log\">\n            <section className=\"log-title-bar\">\n                <h2>My Log</h2>\n                <section className=\"date-navigator\">\n                    <span className=\"date-navigator-arrow previous-date\">&lt;</span>\n                    <span className=\"current-date\">Today</span>\n                    <span className=\"date-navigator-arrow next-date\">&gt;</span>\n                </section>\n            </section>\n            <style jsx>{`\n                .log {\n                    margin-top: 20px;\n                }\n                .log .log-title-bar {\n                    border-bottom: 1px solid rgba(255,255,255,.2);\n                    padding-bottom: 3px;\n                    display: flex;\n                    justify-content: space-between;\n                }\n                .log-title-bar h2 {\n                    font-size: .8rem;\n                    font-weight: normal;\n                }\n                .date-navigator span {\n                    font-size: .8rem;\n                }\n                .date-navigator .current-date {\n                    margin: 0 5px;\n                }\n                .date-navigator .date-navigator-arrow {\n                    opacity: .6;\n                    cursor: pointer;\n                }\n            `}</style>\n        </section>\n    )\n};\n\nexport default Log;","import { useEffect, useState } from 'react';\n\nconst Navbar = (props) => {\n\n    const getUserName = name => {\n        if (name) {\n            return `${name.fname} ${name.lname}`;\n        }\n    }\n\n    return (\n        <section className=\"navbar\">\n            <section className=\"navbar-container\">\n                <h1>Progress Tracker</h1>\n                <span className=\"user-name\">{getUserName(props.userName)}</span>\n            </section>\n            <style jsx>{`\n                .navbar-container {\n                    display: flex;\n                    justify-content: space-between;\n                    padding: 20px 15vw 10px;\n                }\n                .navbar-container * {\n                    font-size: 1.3rem;\n                    font-weight: 500;\n                }\n                @media screen and (max-width: 720px) {\n                    .navbar-container {\n                        margin: 0 auto;\n                        padding: 20px 30px 10px;\n                    }\n                }\n            `}</style>\n        </section>\n    )\n};\n\nexport default Navbar;","import { useEffect, useState } from 'react';\nimport { getTaskColor } from './../theme/colors';\n\nconst TaskPanel = props => {\n\n    const getSelectedTask = taskId => {\n        const userTasks = props.userTasks;\n        let selectedTask = null;\n        userTasks.forEach(task => {\n            if (task.id == taskId) {\n                selectedTask = task;\n            }\n        })\n        return selectedTask;\n    }\n    const switchSelectedTask = newTaskId => {\n        let selectedTask = getSelectedTask(newTaskId);\n        // console.log(selectedTask);\n        setTimeout(() => {\n            console.log(selectedTask)\n        }, 1000)\n        props.setSelectedTask(selectedTask);\n    };\n\n    return (\n        <section className=\"task-panel\">\n            <h2>What are you working on?</h2>\n            <section className=\"tasks-container\">\n                {props.userTasks ? \n                    props.userTasks.map((task, index) => {\n                        return (\n                            <span \n                                className=\"task\" \n                                key={index}\n                                taskId={task.id}\n                                onClick={() => {switchSelectedTask(task.id)}}\n                                style={{\n                                    background: getTaskColor(task.color)\n                                }}>\n                                {task.name}\n                            </span>\n                        )\n                    }) : <span>No tasks added yet.</span>\n                }\n            </section>\n            <style jsx>{`\n                .task-panel {\n                    background-color: white;\n                    grid-area: tasks;\n                    border-radius: 10px;\n                    padding: 20px;\n                }\n                .task-panel .task {\n                    display: inline-block;\n                    padding: 5px 10px;\n                    border-radius: 100px;\n                    background: slateblue;\n                    font-size: .8rem;\n                    margin-right: 5px;\n                    cursor: pointer;\n                    margin-bottom: 5px;\n                    transition: .1s ease-in-out opacity;\n                }\n                .tasks-container:hover .task {\n                    opacity: .5;\n                }\n                .task.task.task:hover {\n                    opacity: 1;\n                }\n                h2 {\n                    color: #2D2D2D;\n                    font-size: 1rem;\n                    margin-bottom: 10px;\n                }\n            `}</style>\n        </section>\n    )\n}\n\nexport default TaskPanel;","import { useEffect, useState } from 'react';\nimport { getTaskColor, getPallete } from './../theme/colors';\nimport TaskPanel from './TaskPanel';\nimport Countdown from './Countdown';\nimport Log from './Log';\n\nconst TimePanel = props => {\n    return (\n        <>\n            <section className=\"time-panel\">\n                <section className=\"time-title\">\n                    <h2 className=\"type-title\">Work</h2>\n                    { props.selectedTask ?\n                        <span className=\"selected-task\">{props.selectedTask.name}</span>\n                        :\n                        ''\n                    }\n                </section>\n                <Countdown />\n                <Log \n                    userTasks={props.userData.user_tasks}\n                    selectedTask={props.selectedTask}\n                />\n            </section>\n            <TaskPanel \n                userTasks={props.userData.user_tasks}\n                setSelectedTask={props.setSelectedTask}\n                />\n            <style jsx>{`\n                .time-panel {\n                    padding: 20px;\n                    grid-area: time;\n                    background-color: ${getPallete('counter-background')};\n                    border-radius: 10px;\n                }\n                .time-panel .time-title {\n                    display: flex;\n                    justify-content: space-between;\n                }\n                .time-panel .type-title {\n                    color: white;\n                    text-align: center;\n                }\n                .time-panel .selected-task {\n                    display: inline-block;\n                    padding: 5px 15px;\n                    min-width: 40%;\n                    max-width: 60%;\n                    text-align: center;\n                    border-radius: 100px;\n                    pointer-events: none;\n                    box-shadow: 0px 2px 1px black;\n                    white-space: nowrap;\n                    background: \n                        ${props.selectedTask ? \n                            getTaskColor(props.selectedTask.color) :\n                            'transparent'};\n                }\n            `}</style>\n        </>\n    )\n}\n\nexport default TimePanel;","import { useState, useEffect } from 'react';\nimport { getPallete } from './../theme/colors';\nimport Navbar from './../components/Navbar';\nimport TimePanel from './../components/TimePanel';\nimport DetailsPanel from './../components/DetailsPanel';\nimport users_list from './../mock_data/users_list.json';\nimport users_data from './../mock_data/users_data.json';\n\nconst Index = () => {\n\n    const [ currentUserData, setCurrentUserData ] = useState({});\n    const [ selectedTask, setSelectedTask ] = useState();\n\n    useEffect(() => {\n        setCurrentUserData(users_data[users_list[0].user_ID])\n    },[])\n\n    useEffect(() => {\n        if (currentUserData.user_tasks) {\n            // console.log(currentUserData.user_tasks[0]);\n            setSelectedTask(currentUserData.user_tasks[0])\n        }\n    },[currentUserData])\n\n    return (\n        <>\n            <Navbar userName={currentUserData.name}/>\n            <main>\n                <TimePanel \n                    userData={currentUserData}\n                    selectedTask={selectedTask}\n                    setSelectedTask={setSelectedTask}\n                    />\n                <DetailsPanel userData={currentUserData}/>\n                <style jsx global>{`\n                    * {\n                        font-family: 'Gotham Rounded', sans-serif;\n                        color: white;\n                        margin: 0;\n                        padding: 0;\n                        box-sizing: border-box;\n                        font-weight: medium;\n                    }\n                    body {\n                        background-color: ${getPallete('main-background')};\n                    }\n                `}\n                </style>\n                <style jsx>{`\n                    margin-top: 10px;\n                    height: 80vh;\n                    width: 100%;\n                    display: grid;\n                    grid-template-rows: 70% 30%;\n                    grid-template-columns: 50% 50%;\n                    grid-template-areas: \n                        \"time details\"\n                        \"tasks details\";\n                    row-gap: 10px;\n                    column-gap: 10px;\n                    \n                    @media screen and (min-width: 720px) {\n                        width: 70vw;\n                        margin: 20px auto 0;\n                    }\n\n                    @media screen and (max-width: 720px) {\n                        padding: 0 30px;\n                    }\n                `}\n                </style>\n            </main>\n        </>\n    );\n}\n\nexport default Index;","import chroma from 'chroma-js';\n\nexport const getTaskColor = (colorNumber) => {\n    const colors = {\n        1: '#456BFF',\n        2: '#ff8a00',\n        3: '#FF4745',\n        4: '#A145FF',\n        5: '#3EC94B',\n        6: '#463EC9',\n        7: '#DC2FD9'\n    }\n    return colors[colorNumber];\n};\n\nexport const getBlack = (intensity) => {\n    return chroma('black').alpha(intensity);\n};\n\nexport const getPallete = (colorName) => {\n    const colors = {\n        'main-background': getBlack(.8),\n        'counter-background': getBlack(.3),\n        'green': '#3EC94B'\n    };\n\n    const tomatoTheme = {\n        'main-background': '#F2523A',\n        'counter-background': '#DA523E'\n    };\n\n    return colors[colorName];\n}","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","module.exports = require(\"chroma-js\");","module.exports = require(\"react\");","module.exports = require(\"react-moment\");","module.exports = require(\"styled-jsx/style\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxvCA;AAAA;AAAA;AAAA;;AAAA;AA0GA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAeuGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAoCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAwBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAoDA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAAA;;AAAA;AAqDA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA+CA;AACA;AACA;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;AACA;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}